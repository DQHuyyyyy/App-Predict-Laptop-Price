import selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
import time

PATH = "C:\Program Files\drivers\chromedriver_103.exe"
driver = webdriver.Chrome()
driver.get("https://www.amazon.com/?&tag=googleglobalp-20&ref=pd_sl_7nnedyywlk_e&adgrpid=159651196451&hvpone=&hvptwo=&hvadid=675114638367&hvpos=&hvnetw=g&hvrand=363499954448486024&hvqmt=e&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9074107&hvtargid=kwd-10573980&hydadcr=2246_13468515&gad_source=1")
driver.maximize_window()

search_box = driver.find_element(By.ID,"twotabsearchtextbox")
search_box.clear()
search_box.send_keys("laptop")
driver.find_element(By.ID,"nav-search-submit-button").click()
driver.find_element(By.XPATH, '//*[@id="brandsRefinements"]/ul/span/li/span/div/a/span').click()

import csv
import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException

# Function to extract information from a product page
def extract_product_info(driver, csv_writer, page_number):
    # Initialize variables for optional fields
    os_label_text, os_value = "Null", "Null"
    size = "Null"
    screen_resolution = "Null"
    pounds = "Null"
    hard_drive_label_text, hard_drive_value = "Null", "Null"
    flash_memory_size = "Null"
    price = "Null"
    graphics_label_text, graphics_value = "Null", "Null"
    ram_label_text, ram_value = "Null", "Null"
    batteries_label_text, batteries_value = "Null", "Null"
    num_ratings = "Null"

    try:
        # Extract brand information
        brand_elm = driver.find_element(By.XPATH, "//span[@class='a-size-base po-break-word']").text
    except NoSuchElementException:
        brand_elm = "Null"

    # Extract Operating System information
    os_label_element = None
    os_value_element = None
    try:
        os_label_element = driver.find_element(By.XPATH, "//th[contains(@class,'prodDetSectionEntry') and contains(text(),'Operating System')]")
        os_value_element = os_label_element.find_element(By.XPATH, "following-sibling::td[@class='a-size-base prodDetAttrValue']")
        os_label_text = os_label_element.text.strip()
        os_value = os_value_element.text.strip()
    except NoSuchElementException:
        pass

    # Extract Screen Size information
    size_element = None
    try:
        size_element = driver.find_element(By.XPATH, "//th[@class='a-color-secondary a-size-base prodDetSectionEntry' and contains(text(), 'Standing screen display size')]")
        size_value_element = size_element.find_element(By.XPATH, "following-sibling::td[@class='a-size-base prodDetAttrValue']")
        size = size_value_element.text.strip() if size_value_element else ""
    except NoSuchElementException:
        pass

    # Extract Screen Resolution information
    screen_resolution_element = None
    try:
        screen_resolution_element = driver.find_element(By.XPATH, "//td[@class='a-size-base prodDetAttrValue'][contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'pixels')]")
        screen_resolution = screen_resolution_element.text.lower().strip()
    except NoSuchElementException:
        pass

    # Extract Pounds information
    pounds_element = None
    try:
        pounds_element = driver.find_element(By.XPATH, "//td[@class='a-size-base prodDetAttrValue'][contains(text(), 'pounds')]")
        pounds = pounds_element.text.strip()
    except NoSuchElementException:
        pass

    # Extract Hard Drive information
    hard_drive_label_element = None
    hard_drive_value_element = None
    try:
        hard_drive_label_element = driver.find_element(By.XPATH, "//th[contains(@class,'prodDetSectionEntry') and contains(text(),'Hard Drive')]")
        hard_drive_value_element = hard_drive_label_element.find_element(By.XPATH, "following-sibling::td[@class='a-size-base prodDetAttrValue']")
        hard_drive_label_text = hard_drive_label_element.text.strip()
        hard_drive_value = hard_drive_value_element.text.strip()
    except NoSuchElementException:
        pass

    # Extract Flash Memory Size information
    flash_memory_size_element = None
    try:
        flash_memory_size_element = driver.find_element(By.XPATH, "//th[@class='a-color-secondary a-size-base prodDetSectionEntry' and contains(text(), 'Flash Memory Size')]")
        flash_memory_size_value_element = flash_memory_size_element.find_element(By.XPATH, "following-sibling::td[@class='a-size-base prodDetAttrValue']")
        flash_memory_size = flash_memory_size_value_element.text.strip()
    except NoSuchElementException:
        pass

    # Extract Price information
    price_element = None
    try:
        price_element = driver.find_element(By.XPATH, "//span[@class='a-price-whole']")
        price = price_element.text.strip()
    except NoSuchElementException:
        pass

    # Extract Graphics information
    graphics_label_element = None
    graphics_value_element = None
    try:
        graphics_label_element = driver.find_element(By.XPATH, "//th[contains(@class,'prodDetSectionEntry') and contains(text(),'Graphics Coprocessor')]")
        graphics_value_element = graphics_label_element.find_element(By.XPATH, "following-sibling::td[@class='a-size-base prodDetAttrValue']")
        graphics_label_text = graphics_label_element.text.strip()
        graphics_value = graphics_value_element.text.strip()
    except NoSuchElementException:
        pass

    # Extract RAM information
    ram_label_element = None
    ram_value_element = None
    try:
        ram_label_element = driver.find_element(By.XPATH, "//th[contains(@class,'prodDetSectionEntry') and contains(text(),'RAM')]")
        ram_value_element = ram_label_element.find_element(By.XPATH, "following-sibling::td[@class='a-size-base prodDetAttrValue']")
        ram_label_text = ram_label_element.text.strip()
        ram_value = ram_value_element.text.strip()
    except NoSuchElementException:
        pass
    
    # Extract CPU Model information
    cpu_model_label_element = None
    cpu_model_value_element = None

    try:
        # Try finding CPU Model using the original method
        driver.find_element(By.XPATH, '//*[@id="poToggleButton"]/a/span').click()
        cpu_model_label_element = driver.find_element(By.XPATH, "//td[@class='a-span3']//span[@class='a-size-base a-text-bold' and contains(text(), 'CPU Model')]/parent::td")
        cpu_model_value_element = cpu_model_label_element.find_element(By.XPATH, "following-sibling::td[@class='a-span9']//span[@class='a-size-base po-break-word']")

        cpu_model_label_text = cpu_model_label_element.text.strip()
        cpu_model_value = cpu_model_value_element.text.strip()
    except NoSuchElementException:
        # If not found, try the alternative method
        try:
            cpu_model_label_element = driver.find_element(By.XPATH, "//td[@class='_product-comparison-desktop_desktopFaceoutStyle_tableAttributeName__1hX19']//span[@class='a-size-base a-text-bold' and contains(text(), 'cpu model number')]")
            cpu_model_value_element = cpu_model_label_element.find_element(By.XPATH, "following::span[@class='a-size-base a-color-base'][1]")

            cpu_model_label_text = cpu_model_label_element.text.strip()
            cpu_model_value = cpu_model_value_element.text.strip()

            print(f"{cpu_model_label_text}: {cpu_model_value}")
        except NoSuchElementException:
            pass


    # Write data to CSV
    csv_writer.writerow([page_number, brand_elm, os_value, size, screen_resolution, pounds,
                          hard_drive_value, flash_memory_size, price,
                         graphics_value, ram_value,cpu_model_value])


# Function to extract links from elements
def extract_links(elements, page_number, csv_writer):
    for index, element in enumerate(elements, start=1):
        link_element = element.find_element(By.XPATH, ".//a[@class='a-link-normal s-no-outline']")
        link = link_element.get_attribute("href")
        print(f"Link {index}:", link)

        # Visit the link
        driver.execute_script("window.open('');")
        driver.switch_to.window(driver.window_handles[1])
        driver.get(link)

        # Extract information from the product page
        extract_product_info(driver, csv_writer, page_number)

        # Close the tab and switch back to the main window
        driver.close()
        driver.switch_to.window(driver.window_handles[0])


# Number of sets of pages to scrape
num_sets = 1

# CSV file path
csv_file_path = r'E:\MAJOR\Major 4\DAP391\Laptop predictor\laptop_data1_19_3.csv'

# Open CSV file for writing
with open(csv_file_path, 'w', newline='', encoding='utf-8') as csvfile:
    # Create a CSV writer
    csv_writer = csv.writer(csvfile)

    # Write headers to CSV
    csv_writer.writerow(['Page Number', 'Brand', 'Operating System Value',
                         'Screen Size', 'Screen Resolution', 'Weight',
                         'Hard Drive Value', 'Flash Memory Size', 'Price', 'Graphics Value',
                        'RAM Value','CPU Model'])

    # Loop through sets of pages
    for page_number in range(1, num_sets + 1):
        print(f"\nSet of pages {page_number}:")

        # Find elements with the specified class on the current page
        elements = driver.find_elements(By.CLASS_NAME,"sg-col-20-of-24.s-result-item.s-asin.sg-col-0-of-12.sg-col-16-of-20.sg-col.s-widget-spacing-small.sg-col-12-of-16")

        # Extract and print links from the current page
        extract_links(elements, page_number, csv_writer)

        # Click the next page button if it's present
        try:
            next_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable(
                    (By.CSS_SELECTOR, ".s-pagination-item.s-pagination-next.s-pagination-button.s-pagination-separator")))
            next_button.click()
        except NoSuchElementException:
            print("No 'Next' button found.")
            break

        # Wait for a short delay before proceeding to the next page
        time.sleep(10)

print(f"Data has been saved to {csv_file_path}")
